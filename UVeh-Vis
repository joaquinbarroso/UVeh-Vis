#!/usr/bin/python3
import argparse
import subprocess
import os, sys
import time
import ctypes

c = 2.998e8  # Speed of light in m/s
h = 6.626e-34  # Planck's constant in J*s
ev_to_joules = 1.602e-28  # Conversion factor from eV to joules

parser = argparse.ArgumentParser(prog="UVeh-Vis", description='Plotter of Absorption spectra using data of Quantum chemistry calculations of Excited states',
                                 epilog='Gaussian 09, 16, Qchem 5.x and Orca files supported',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("files", nargs="+", help="Input file(s), separated by spaces")
parser.add_argument("-wl", dest='wavelength', metavar='i,f', default='450,750' ,type=str, help="Starting (i) and final (f) wavelength in nm, separated by a comma (,)")
parser.add_argument("-dev", dest='deviation', metavar='value', type=float, default=0.4, help="Standard deviation (eV)")
parser.add_argument("-csv", dest="table", metavar='filename.csv', type=str, nargs="?", const='uveh_out.csv', help="Creates a CSV file containing all file(s) absorbances. Default name is 'uveh_out.csv'")
parser.add_argument("-incsv", dest="incsv", metavar='filename.csv', type=str,help="Reads an existing CSV file that constains and Absorption spectra and adds it to the plot")
parser.add_argument("-gau", "--gaussian", action='store_true', default=True, help="Plot the UV-Vis spectra with Gaussian adjustment")
parser.add_argument("-ltz", "--lorentzian", action='store_true', help="Plot the UV-Vis spectra with Lorenztian adjustment")
parser.add_argument("-norm", "--normalized", action='store_true', help="Y values are normalized to the highest peak of all lines")
parser.add_argument("-showm",dest='showmultiplicity', metavar='percentaje', type=float, nargs="?", const=0.5, default=-1, help="Each peak above the percentaje is labeled with the multiplicity of the resulting excited state")
parser.add_argument("-nosplit", dest="nosplit", action='store_true', help="If a multiple job file is provided, it won't be splitted")
parser.add_argument("-prog", dest="program", action='store_true', help="UVeh-Vis will print the format that each file is recognized")
parser.add_argument("-v","--version", action='version', version='%(prog)s 1.2.2')
args = parser.parse_args()

datas = args.files
wl = args.wavelength
wl=wl.split(',')
dev = args.deviation
ltz = args.lorentzian
gaus = args.gaussian
normal = args.normalized
multip = args.showmultiplicity
csv = args.table
incsv = args.incsv
nosplit=args.nosplit
program=args.program

Progs=['Gaussian','Q-Chem','Orca']
multiplicity = {'Singlet': 'S', 'Triplet': 'T', 'Quintet': 'Q'}
ES_key = {'Gaussian': ' f=', 'Q-Chem': 'Strength   :', 'Orca': 'STATE '}
Prog_key = {'Gaussian':'Gaussian, Inc.  All Rights Reserved', 'Q-Chem': '                  Welcome to Q-Chem\n', 'Orca':'                                 * O   R   C   A *\n'}
types = []
unsupported_files = [] 
all_mult=[]
to_split=[]
temp_files=[]
datasProg=[]
all_nstates=[]

sys.path.append(os.getcwd())
PATH=sys.path[0]
lib_path=PATH+'/reader.so'
lib = ctypes.CDLL(lib_path)

lib.search_file.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)]
lib.search_file.restype = ctypes.POINTER(ctypes.c_int)
lib.export_lines.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_int)]
lib.export_lines.restype = ctypes.POINTER(ctypes.c_char_p)

citePATH=PATH+'/cite'
issuePATH=PATH+'/issue_info'
PloPATH=PATH+'/Plotter.py'

def QC_prog(x):
    filename = str(x).encode('utf-8')
    result_size = ctypes.c_int(0)
    for Prog in Progs:
        string=Prog_key.get(Prog)
        search_string = str(string).encode('utf-8')
        result_ptr = lib.search_file(filename, search_string, ctypes.byref(result_size))
        Prog_indexes = [result_ptr[i] for i in range(result_size.value)]
        if len(Prog_indexes)>=2:
            filetype=Prog
            global njobs
            njobs = len(Prog_indexes)-1
            break
    if len(Prog_indexes)<2:
        filetype='Non'
    return filetype
  
def index_Prog(x,filetype):
    string=Prog_key.get(filetype)
    filename = str(x).encode('utf-8')
    search_string = str(string).encode('utf-8')
    result_size = ctypes.c_int(0)
    result_ptr = lib.search_file(filename, search_string, ctypes.byref(result_size))
    indexes = [result_ptr[i] for i in range(result_size.value)]
    return indexes
  
def ES_check(x,filetype):
    keyword=ES_key.get(filetype)
    filename = str(x).encode('utf-8')
    search_string = str(keyword).encode('utf-8')
    result_size = ctypes.c_int(0)
    result_ptr = lib.search_file(filename, search_string, ctypes.byref(result_size))
    result = [result_ptr[i] for i in range(result_size.value)]
    nstates=len(result)-1
    return nstates

def citeExit(err):
    with open(citePATH) as f:
        exec(f.read())
    time.sleep(1)
    print(err)
    exit()

if len(wl) == 1:
    citeExit("Error: You must provide a wavelength range separated by a comma e.g. -wl 200,700")
elif not wl[0] < wl[1]:
    citeExit('Error: Initial wavelenght must be lower than final wavelenght')
lambda1 = wl[0]
lambda2 = wl[1]

print('Checking File(s)...\n')
try:
    for file in datas:
        filename=file
        file = os.path.abspath(file)
        if not os.path.exists(file):
            print(f"Unable to open {filename}: No such file, please enter a valid filename")
            unsupported_files.append(filename)
        else:
                if not os.path.isfile(file):
                    print(filename, ': is not a file')
                    unsupported_files.append(filename)
                else:
                    filetype=QC_prog(file)
                    if filetype=='Non':
                        print(filename, ': Filetype not supported')
                        unsupported_files.append(filename)
                    else:

                        nstates=ES_check(file,filetype)
                        if nstates==0:
                            print(filename, ': Error: No excited states were found')
                            unsupported_files.append(filename)
                        else:
                            datasProg.append(filetype)
                            all_nstates.append(nstates)
                            if njobs > 1:
                                print(f'{filename}: File has {njobs} jobs')
                                to_split.append(file)
except Exception as e:
    citeExit("An error occurred:"+ e)
for file in unsupported_files:
        datas.remove(file)
if to_split != []:
    if not nosplit:
        for x in to_split:
            name=os.path.basename(x)
            print(f'\nSplitting {name}...')
            filetype=QC_prog(x)
            indexes=index_Prog(x,filetype)
            filename = str(x).encode('utf-8')
            num_lines = ctypes.c_int(0)
            lines_ptr = lib.export_lines(filename, ctypes.byref(num_lines))
            lines = [lines_ptr[i].decode('utf-8') for i in range(num_lines.value)]
            for n in range(1,njobs+1):
                sub_name=name.split(".")[0]+'(J'+str(n)+').out'
                temp_files.append(sub_name)
                with open(sub_name,'w') as file:
                    print(sub_name, 'created')
                    start=indexes[n-1]-4
                    end=indexes[n]-2
                    for line in lines[start:end]:
                        file.write(line)
            datasindex=datas.index(name)
            datas.remove(name)
            del datasProg[datasindex]
            del all_nstates[datasindex]
        for x in temp_files:
            nstates=ES_check(x,filetype)
            if nstates==0:
                print(x, ': No excited states were found')
            else:
                datas.append(x)
                datasProg.append(filetype)
                all_nstates.append(nstates)
    else:
        print("Multiple job files won't be splitted")   
if unsupported_files==[]:
        print('\nFile(s) correctly processed')

if not datas==[]:
    print('\nChecking File(s)...Done')
else:
    citeExit('Error: None provided file(s) is supported, please check the errors above')

print('Saving Excited states info...\n')
a=0
for m in datas:
    m_name=m
    m = os.path.abspath(m)
    a+=1
    datasindex=datas.index(m_name)
    filetype=datasProg[datasindex]
    nstates=all_nstates[datasindex]
    with open(m, 'r') as file:
        lines = file.readlines()
        exec("osc_values_"+str(a)+"= []")
        exec("nm_values_"+str(a)+"=[]")
        exec("mult_values_"+str(a)+"=[]")
        if filetype=='Q-Chem':
            types.append(m_name+' is a Q-Chem output file')
            for num, line in enumerate(lines):
                if 'Strength   :' in line:
                    osc = float(line.split()[-1])
                    exec("osc_values_"+str(a)+".append(osc)")
                    prev_line = lines[num - 4].strip()
                    prev_block = lines[num -5:num]
                    mult = [multiplicity.get(line.split(':')[-1].strip(), '') for line in prev_block if 'Multiplicity' in line]
                    exec("mult_values_"+str(a)+".append(mult[0])")
                    E= float(prev_line.split()[-1])
                    nm=h*c/(E*ev_to_joules)
                    exec("nm_values_"+str(a)+".append(nm)")
        elif filetype=='Gaussian':
            types.append(m_name+' is a Gaussian output file')
            for num, line in enumerate(lines):
                if ' f=' in line:
                    nm = float(line.split()[-4])
                    exec("nm_values_"+str(a)+".append(nm)")
                    osc = str(line.split()[-2])
                    osc = float(osc.split('=')[-1])
                    mult = (line.split()[-7].split("-")[0])
                    mult = multiplicity.get(mult)
                    exec("mult_values_"+str(a)+".append(mult)")
                    exec("osc_values_"+str(a)+".append(osc)")
        elif filetype=='Orca':
            types.append(m_name+' is an Orca output file')
            start=lines.index('         ABSORPTION SPECTRUM VIA TRANSITION ELECTRIC DIPOLE MOMENTS\n')+5
            end=start+nstates
            ESdata=lines[start:end]
            if 'TD-DFT/TDA EXCITED STATES (SINGLETS)\n' in lines: multipl='Singlet'
            else: multipl='Non'
            for line in ESdata:
                linefrag=line.split()
                nm=float(linefrag[2])
                osc=float(linefrag[3])
                mult = multipl
                mult = multiplicity.get(mult)
                exec("nm_values_"+str(a)+".append(nm)")
                exec("mult_values_"+str(a)+".append(mult)")
                exec("osc_values_"+str(a)+".append(osc)")
    exec("all_mult.append(mult_values_"+str(a)+")")
if program:
    for x in types: print(x)
if 'Orca' in datasProg: print('Warning: Triplet states cannot be plotted using Orca')
if incsv:
    if not os.path.exists(incsv):
            print(f"Unable to open {incsv}: No such csv file, please enter a valid filename\nWarning: -incsv command will be ignored")
    else:
        if not os.path.isfile(incsv):
            print(incsv, ': is not a file\nWarning: -incsv command will be ignored')
        else:
            table=[]
            xcsv=[]
            ycsv=[]
            y_csv=[]
            with open(incsv, 'r') as filecsv:
                lines=filecsv.readlines()
                for line in lines:
                    if line[0].isdigit():
                        table.append(line)
                if not table==[]:
                    evline=table[0].rstrip()
                    if not evline.split()[0]==evline:
                        csvtype="()"
                    elif not evline.split(',')[0]==evline:
                        csvtype="""(',')"""
                    else:
                        csvtype='Non'
                else:
                    csvtype='Non'
                if not csvtype=='Non':
                    for line in table:
                        line=line.rstrip()
                        exec('sepline=line.split'+csvtype)
                        xcsv.append(sepline[0])
                        ycsv.append(sepline[1])
                    x_csv = [eval(i) for i in xcsv]
                    y_val = [eval(i) for i in ycsv]
                    ymax=max(y_val)
                    for y in y_val:
                        yn=y/ymax
                        y_csv.append(yn)
                    print('Warning: Spectra will be normalized for visualization purposes')
                    normal=True
                else:
                    print(f'Error: {incsv} . Please make sure it has a valid csv format. \nWarning: -incsv command will be ignored')
with open(PloPATH) as f:
    exec(f.read())

